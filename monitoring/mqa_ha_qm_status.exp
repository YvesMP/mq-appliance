#!/usr/bin/expect -f

# (C) Copyright IBM Corporation 2016
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Uncomment to suppress normal output to stdout
log_user 0
# Uncomment for debug output
#exp_internal 1

set timeout 300

set appliance1 $::env(MQA_appliance1)
set appliance2 $::env(MQA_appliance2)
set appliance1_name "Appliance1"
set appliance2_name "Appliance2"
set userid $::env(MQA_userid)
set password $::env(MQA_password)
set qm $::env(MQA_qm)

proc sshLogin {id userid password namevar} {
    upvar 1 $namevar name
    expect -i $id "login:"
    send -i $id "${userid}\n"
    expect -i $id "Password:"
    send -i $id "${password}\n"
    expect -i $id "#"
    send -i $id "show system\n"
    expect -i $id "#"
    set lines [split $expect_out(buffer) \n]
    set variable [lindex $lines 1]
    foreach line $lines {
        set current_line $line
        if {[string match "*name*" ${current_line}]} {
            regexp ".* name: (.*)\r" $current_line matched_line name
        }
    }
    send -i $id "mqcli\n"
    return 0
}

proc sshLogout {id} {
    send -i $id "exit\n"
    expect -i $id "#"
    send -i $id "exit\n"
    expect -i $id eof
    return 0
}

proc getStatus {id qm ip name} {
    set status      "error getting status"
    set cpu         "error getting cpu"
    set memory      "error getting memory"
    set filesystem  "error getting filesystem"
    set ha_role     "error getting HA role"
    set ha_status   "error getting HA status"
    set ha_control  "error getting HA control"
    set ha_location "error getting HA preferred location"

    expect -i $id "(mqcli)#"
    send -i $id "status ${qm}\n"
    expect -i $id "(mqcli)#"
    set lines [split $expect_out(buffer) \n]
    set variable [lindex $lines 1]
    foreach line $lines {
        set current_line $line
        if {[string match "*Status*" ${current_line}]} {
            regexp ".* Status\\((.*)\\)" $current_line matched_line status
        } elseif {[string match "*CPU*" ${current_line}]} {
            regexp "CPU: *(.*)%" $current_line matched_line cpu
        } elseif {[string match "*Memory*" ${current_line}]} {
            regexp "Memory: *(.*)MB" $current_line matched_line memory
        } elseif {[string match "*Queue manager file system*" ${current_line}]} {
            regexp "Queue manager file system:.*\\\[(.*)%\\\]" $current_line matched_line filesystem
        } elseif {[string match "*HA role*" ${current_line}]} {
            regexp "HA role: *(.*)\r" $current_line matched_line ha_role
        } elseif {[string match "*HA status*" ${current_line}]} {
            regexp "HA status: *(.*)\r" $current_line matched_line ha_status
        } elseif {[string match "*HA control*" ${current_line}]} {
            regexp "HA control: *(.*)\r" $current_line matched_line ha_control
        } elseif {[string match "*HA preferred location*" ${current_line}]} {
            regexp "HA preferred location: *(.*)" $current_line matched_line ha_location
        }
    }

    if {$status != "Running"} {
        set cpu         "n/a"
        set memory      "n/a"
        set filesystem  "n/a"
    }

    send_user "$ip,$name,$status,$cpu,$memory,$filesystem,$ha_role,$ha_status,$ha_control,$ha_location\n"
    send -i $id "\n"
    return 0
}

spawn ssh -o StrictHostKeyChecking=no ${appliance1}
set a1id $spawn_id

spawn ssh -o StrictHostKeyChecking=no ${appliance2}
set a2id $spawn_id

sshLogin $a1id $userid $password appliance1_name
sshLogin $a2id $userid $password appliance2_name

set carry_on_looping 1
while { $carry_on_looping == 1 } {
    getStatus $a1id $qm $appliance1 $appliance1_name
    getStatus $a2id $qm $appliance2 $appliance2_name
    sleep 5
}

sshLogout $a1id
sshLogout $a2id
